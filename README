Write-up for PA1
----------------

user: cjee
user: schuberl

In our lexer implementation we tried to follow the given outline and provided files as far as possible, to make forgetting tokens or similar errors less likely.

# Lexer

The lexer begins with a definition of regular expressions that were derived by trying to stay as close to the wording of the specification as we could. We consulted the flex manual at http://flex.sourceforge.net/manual/ for help with the specific syntax of flex's regular expressions.

## States

We define two conditional states, COMMENT and STRING to scope certain rules that apply only when inside a comment or string environment; for example a closing comment token can be parsed while in comment mode, while outside of it it results in an error.

## Whitespace

It took us some experimentation and thinking to arrive at this simple solution. Initially, we believed we had to specify optional whitespace with every token.

## Comments

Comments were a good introduction to states. The only part that is not a straightfoward application of states and token parsing is counting the level of comment nesting. We use a global int to increment the comment level when we encounter a new (* opening comment, and decrement it when we see a closing comment. All error handling only relies on being in the state of comment.

## Operators

Operators are special in that they are represented as themselves rather than a token imported from an external file.

## Keywords

Were copied from documentation

## Type and Object IDs

These were interesting regexes, as they are only different depending on the first character

## String constants

String constants were clearly meant to be the hardest part of this assignment, and while we have implemented their major functionality, we're not confident in having tested the edge cases enough.
We initially had a monstruous rule set with two more states, STRING_ERROR and STRING_OVERFLOW but went back to a simpler implementation that relied more on regular expressions. The main regex we use for string body text can be broken down like this:

(   ([^\n\0\"])  |  (\\[ ]*\n)    )*  /  \"

[^\n\0\"]         not newline nor null nor " characters
\\[ ]*\n          escape character followed by
                  any number of blanks, ending with new line
(.....)*          any number of characters matching above two regex
/\"               followed by " characater, but do not consume the " character

# Testing

To test we created a tree of test files in subdirectories such as ./10/03/multi_line_comment.cl, ./10/03/single_line_comment.cl etc. to conform to the documentation. Unfortunately our test runner script was not completed in time so we ran the test cases we had manually.
Additionally we ran the lexer on various Cool programs we found on github.