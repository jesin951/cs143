#!/usr/bin/env python
#

import sys, argparse, logging, os, fnmatch, subprocess

# Gather our code in a main() function
def main(args, loglevel):
  logging.basicConfig(format="%(levelname)s: %(message)s", level=loglevel)
  lexer = os.path.abspath(args.lexer)  
  for root, dir, files in os.walk(args.path):
    print root
    for cool_source_file in fnmatch.filter(files, "*.cl"):
      print cool_source_file + ":"
      absolute_path_source = os.path.abspath(os.path.join(root, cool_source_file))
      absolute_path_expect = os.path.abspath(os.path.join(root, cool_source_file + ".tepid"))
      lexer_command = "<(" + lexer + " " + absolute_path_source + " | tail -n +2) " # skip first line
      print lexer_command
      diff_output = subprocess.check_output("diff", lexer_command, absolute_path_expect)
      print diff_output

# Standard boilerplate to call the main() function to begin
# the program.
if __name__ == '__main__':
  parser = argparse.ArgumentParser( 
                                    description = "Does a thing to some stuff.",
                                    epilog = "As an alternative to the commandline, params can be placed in a file, one per line, and specified on the commandline like '%(prog)s @params.conf'.",
                                    fromfile_prefix_chars = '@' )
  # TODO Specify your real parameters here.
  parser.add_argument(
                      "path",
                      nargs='?',
                      default="./tests",
                      help = "path to the test suite to run",
                      )
  parser.add_argument(
                      "lexer",
                      nargs='?',
                      default="./lexer",
                      help="path to the lexer executable to use")
  parser.add_argument(
                      "-v",
                      "--verbose",
                      help="increase output verbosity",
                      action="store_true")
  args = parser.parse_args()

  # Setup logging
  if args.verbose:
    loglevel = logging.DEBUG
  else:
    loglevel = logging.INFO
  
  main(args, loglevel)
